use crate::models::moneylist::*;
use actix_web::{put, web, HttpResponse};
use log::{debug, info};
use serde::{Deserialize, Serialize};
use serde_json::json;

// ‡∏™‡∏£‡πâ‡∏≤‡∏á struct ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á
#[derive(Serialize, Deserialize)]
struct UserdataUpgate {
    id: i32,
}

#[derive(Serialize, Deserialize)]
struct MoneylistUpgate {
    description: String,
    date: String,
    amount: i32,
    types: String,
}
#[derive(Serialize, Deserialize)]
struct PostMoneyRequest {
    user_data: UserdataUpgate,
    dataitem: MoneylistUpgate,
}

// PUT /money/edit/{id}: ‡∏£‡∏±‡∏ö JSON ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏µ‡∏¢‡πå "expense"/"income" ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ JSON ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏î‡πâ‡∏ß‡∏¢ ID ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
#[put("/money/edit/{id}")]
async fn put_money(list_id: web::Path<i32>,input_data: web::Json<PostMoneyRequest>) -> HttpResponse {
    info!("put money by id");
    debug!("id: {} ü™Ñ", list_id);

    // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤‡πÅ‡∏ö‡∏ö JSON (‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡πÄ‡∏ï‡∏¥‡∏° mut ‡∏´‡∏•‡∏±‡∏á let)
    let _editdata = input_data.into_inner();
    let id: i32 = list_id.to_string().parse().unwrap();

    // ‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á id 3
    let mut _editdata_old = Moneylist {
        list_id: 3,
        description: "‡πÅ‡∏°‡πà‡πÉ‡∏´‡πâ".to_string(),
        date: "2023-03-15".to_string(),
        amount: 100,
        types: "income".to_string(),
    };

    let _editdata_new = Moneylist {
        list_id: id,
        description: _editdata.dataitem.description,
        date: _editdata.dataitem.date,
        amount: _editdata.dataitem.amount,
        types: _editdata.dataitem.types,
    };

    if id == 3 {
        debug!("‡∏°‡∏µ list_id ‡∏ô‡∏µ‡πâ‡∏à‡∏£‡∏¥‡∏á ‚úÖ");
    } else {
        _editdata_old = Moneylist {
            list_id: 0,
            description: "‡πÑ‡∏°‡πà‡∏°‡∏µ".to_string(),
            date: "‡πÑ‡∏°‡πà‡∏ö‡∏≠‡∏Å".to_string(),
            amount: 0,
            types: "‡πÑ‡∏°‡πà‡∏ô‡∏∞".to_string(),
        };
        debug!("‡πÑ‡∏°‡πà‡∏°‡∏µ list_id ‡∏ô‡∏µ‡πâ‡∏à‡∏£‡∏¥‡∏á üê§");
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    #[derive(Serialize, Deserialize)]
    struct CombinedResponse {
        items_old: Moneylist,
        items_new: Moneylist,
        text: String,
    }

    let combined_response = CombinedResponse {
        items_old: _editdata_old,
        items_new: _editdata_new,
        text: "‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏∞‡πÄ‡∏î‡πâ‡∏≠".to_string(),
    };

    let response_body = json!(combined_response);

    HttpResponse::Ok().json(response_body)
}